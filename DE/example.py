# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_example', [dirname(__file__)])
        except ImportError:
            import _example
            return _example
        if fp is not None:
            try:
                _mod = imp.load_module('_example', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _example = swig_import_helper()
    del swig_import_helper
else:
    import _example
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def test_func(x, f, nx, mx, func_num):
    return _example.test_func(x, f, nx, mx, func_num)
test_func = _example.test_func

def sphere_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.sphere_func(arg1, arg2, arg3, arg4, arg5, arg6)
sphere_func = _example.sphere_func

def ellips_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.ellips_func(arg1, arg2, arg3, arg4, arg5, arg6)
ellips_func = _example.ellips_func

def bent_cigar_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.bent_cigar_func(arg1, arg2, arg3, arg4, arg5, arg6)
bent_cigar_func = _example.bent_cigar_func

def discus_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.discus_func(arg1, arg2, arg3, arg4, arg5, arg6)
discus_func = _example.discus_func

def dif_powers_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.dif_powers_func(arg1, arg2, arg3, arg4, arg5, arg6)
dif_powers_func = _example.dif_powers_func

def rosenbrock_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.rosenbrock_func(arg1, arg2, arg3, arg4, arg5, arg6)
rosenbrock_func = _example.rosenbrock_func

def schaffer_F7_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.schaffer_F7_func(arg1, arg2, arg3, arg4, arg5, arg6)
schaffer_F7_func = _example.schaffer_F7_func

def ackley_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.ackley_func(arg1, arg2, arg3, arg4, arg5, arg6)
ackley_func = _example.ackley_func

def rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6)
rastrigin_func = _example.rastrigin_func

def weierstrass_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.weierstrass_func(arg1, arg2, arg3, arg4, arg5, arg6)
weierstrass_func = _example.weierstrass_func

def griewank_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.griewank_func(arg1, arg2, arg3, arg4, arg5, arg6)
griewank_func = _example.griewank_func

def schwefel_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.schwefel_func(arg1, arg2, arg3, arg4, arg5, arg6)
schwefel_func = _example.schwefel_func

def katsuura_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.katsuura_func(arg1, arg2, arg3, arg4, arg5, arg6)
katsuura_func = _example.katsuura_func

def bi_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.bi_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6)
bi_rastrigin_func = _example.bi_rastrigin_func

def grie_rosen_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.grie_rosen_func(arg1, arg2, arg3, arg4, arg5, arg6)
grie_rosen_func = _example.grie_rosen_func

def escaffer6_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.escaffer6_func(arg1, arg2, arg3, arg4, arg5, arg6)
escaffer6_func = _example.escaffer6_func

def step_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.step_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6)
step_rastrigin_func = _example.step_rastrigin_func

def cf01(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.cf01(arg1, arg2, arg3, arg4, arg5, arg6)
cf01 = _example.cf01

def cf02(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.cf02(arg1, arg2, arg3, arg4, arg5, arg6)
cf02 = _example.cf02

def cf03(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.cf03(arg1, arg2, arg3, arg4, arg5, arg6)
cf03 = _example.cf03

def cf04(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.cf04(arg1, arg2, arg3, arg4, arg5, arg6)
cf04 = _example.cf04

def cf05(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.cf05(arg1, arg2, arg3, arg4, arg5, arg6)
cf05 = _example.cf05

def cf06(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.cf06(arg1, arg2, arg3, arg4, arg5, arg6)
cf06 = _example.cf06

def cf07(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.cf07(arg1, arg2, arg3, arg4, arg5, arg6)
cf07 = _example.cf07

def cf08(arg1, arg2, arg3, arg4, arg5, arg6):
    return _example.cf08(arg1, arg2, arg3, arg4, arg5, arg6)
cf08 = _example.cf08

def shiftfunc(arg1, arg2, arg3, arg4):
    return _example.shiftfunc(arg1, arg2, arg3, arg4)
shiftfunc = _example.shiftfunc

def rotatefunc(arg1, arg2, arg3, arg4):
    return _example.rotatefunc(arg1, arg2, arg3, arg4)
rotatefunc = _example.rotatefunc

def asyfunc(arg1, x, arg3, arg4):
    return _example.asyfunc(arg1, x, arg3, arg4)
asyfunc = _example.asyfunc

def oszfunc(arg1, arg2, arg3):
    return _example.oszfunc(arg1, arg2, arg3)
oszfunc = _example.oszfunc

def cf_cal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _example.cf_cal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
cf_cal = _example.cf_cal

def fact(n):
    return _example.fact(n)
fact = _example.fact
# This file is compatible with both classic and new-style classes.


