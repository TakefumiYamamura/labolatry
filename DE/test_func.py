# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_test_func', [dirname(__file__)])
        except ImportError:
            import _test_func
            return _test_func
        if fp is not None:
            try:
                _mod = imp.load_module('_test_func', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _test_func = swig_import_helper()
    del swig_import_helper
else:
    import _test_func
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _test_func.new_intArray(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _test_func.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _test_func.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _test_func.intArray___setitem__(self, index, value)

    def cast(self):
        return _test_func.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _test_func.intArray_frompointer
    if _newclass:
        frompointer = staticmethod(_test_func.intArray_frompointer)
intArray_swigregister = _test_func.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _test_func.intArray_frompointer(t)
intArray_frompointer = _test_func.intArray_frompointer


def test_array(INPUT):
    return _test_func.test_array(INPUT)
test_array = _test_func.test_array

def test_pointer(INPUT):
    return _test_func.test_pointer(INPUT)
test_pointer = _test_func.test_pointer

def test(x):
    return _test_func.test(x)
test = _test_func.test

def test_func(x, f, nx, mx, func_num):
    return _test_func.test_func(x, f, nx, mx, func_num)
test_func = _test_func.test_func

def sphere_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.sphere_func(arg1, arg2, arg3, arg4, arg5, arg6)
sphere_func = _test_func.sphere_func

def ellips_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.ellips_func(arg1, arg2, arg3, arg4, arg5, arg6)
ellips_func = _test_func.ellips_func

def bent_cigar_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.bent_cigar_func(arg1, arg2, arg3, arg4, arg5, arg6)
bent_cigar_func = _test_func.bent_cigar_func

def discus_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.discus_func(arg1, arg2, arg3, arg4, arg5, arg6)
discus_func = _test_func.discus_func

def dif_powers_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.dif_powers_func(arg1, arg2, arg3, arg4, arg5, arg6)
dif_powers_func = _test_func.dif_powers_func

def rosenbrock_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.rosenbrock_func(arg1, arg2, arg3, arg4, arg5, arg6)
rosenbrock_func = _test_func.rosenbrock_func

def schaffer_F7_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.schaffer_F7_func(arg1, arg2, arg3, arg4, arg5, arg6)
schaffer_F7_func = _test_func.schaffer_F7_func

def ackley_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.ackley_func(arg1, arg2, arg3, arg4, arg5, arg6)
ackley_func = _test_func.ackley_func

def rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6)
rastrigin_func = _test_func.rastrigin_func

def weierstrass_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.weierstrass_func(arg1, arg2, arg3, arg4, arg5, arg6)
weierstrass_func = _test_func.weierstrass_func

def griewank_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.griewank_func(arg1, arg2, arg3, arg4, arg5, arg6)
griewank_func = _test_func.griewank_func

def schwefel_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.schwefel_func(arg1, arg2, arg3, arg4, arg5, arg6)
schwefel_func = _test_func.schwefel_func

def katsuura_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.katsuura_func(arg1, arg2, arg3, arg4, arg5, arg6)
katsuura_func = _test_func.katsuura_func

def bi_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.bi_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6)
bi_rastrigin_func = _test_func.bi_rastrigin_func

def grie_rosen_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.grie_rosen_func(arg1, arg2, arg3, arg4, arg5, arg6)
grie_rosen_func = _test_func.grie_rosen_func

def escaffer6_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.escaffer6_func(arg1, arg2, arg3, arg4, arg5, arg6)
escaffer6_func = _test_func.escaffer6_func

def step_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.step_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6)
step_rastrigin_func = _test_func.step_rastrigin_func

def cf01(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.cf01(arg1, arg2, arg3, arg4, arg5, arg6)
cf01 = _test_func.cf01

def cf02(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.cf02(arg1, arg2, arg3, arg4, arg5, arg6)
cf02 = _test_func.cf02

def cf03(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.cf03(arg1, arg2, arg3, arg4, arg5, arg6)
cf03 = _test_func.cf03

def cf04(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.cf04(arg1, arg2, arg3, arg4, arg5, arg6)
cf04 = _test_func.cf04

def cf05(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.cf05(arg1, arg2, arg3, arg4, arg5, arg6)
cf05 = _test_func.cf05

def cf06(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.cf06(arg1, arg2, arg3, arg4, arg5, arg6)
cf06 = _test_func.cf06

def cf07(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.cf07(arg1, arg2, arg3, arg4, arg5, arg6)
cf07 = _test_func.cf07

def cf08(arg1, arg2, arg3, arg4, arg5, arg6):
    return _test_func.cf08(arg1, arg2, arg3, arg4, arg5, arg6)
cf08 = _test_func.cf08

def shiftfunc(arg1, arg2, arg3, arg4):
    return _test_func.shiftfunc(arg1, arg2, arg3, arg4)
shiftfunc = _test_func.shiftfunc

def rotatefunc(arg1, arg2, arg3, arg4):
    return _test_func.rotatefunc(arg1, arg2, arg3, arg4)
rotatefunc = _test_func.rotatefunc

def asyfunc(arg1, x, arg3, arg4):
    return _test_func.asyfunc(arg1, x, arg3, arg4)
asyfunc = _test_func.asyfunc

def oszfunc(arg1, arg2, arg3):
    return _test_func.oszfunc(arg1, arg2, arg3)
oszfunc = _test_func.oszfunc

def cf_cal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _test_func.cf_cal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
cf_cal = _test_func.cf_cal
# This file is compatible with both classic and new-style classes.

cvar = _test_func.cvar

