soil.art <- c(mean(newdata$scores[15:21]), mean(newdata$scores[22:28]))
plot(soil.nat, xaxt = "n", ylim = c(20,35), type="b", xlab="Sehi", ylab= "meanvalue", pch=1)
par(new=T)
plot(soil.art, xaxt = "n", ylim = c(20,35), type="b", xlab="", ylab="", pch=2)
axis(side=1, at=1:2)
plot(soil.art, xaxt = "n", ylim = c(20,35), type="b", xlab="", ylab="", pch=2)
plot(soil.nat, xaxt = "n", ylim = c(20,35), type="b", xlab="Sehi", ylab= "meanvalue", pch=1)
calcium <- matrix(c(16.5, 18.4, 12.7, 14.0, 12.8,
14.5, 11.0, 10.8, 14.3, 10.0,
39.1, 26.2, 21.3, 35.8, 40.2,
32.0, 23.8, 28.8, 25.0, 29.3),
nrow=5, ncol=4)
hormone <- c(rep(1,10), rep(2,10))
sex <- c(rep(1,5), rep(2,5), rep(1,5), rep(2,5))
newdata <- data.frame(hrm = as.factor(hormone), sx = as.factor(sex), scores = as.vector(calcium))
summary(aov(scores ~ sx + hrm+ sx*hrm, data = newdata))
height <- c(29.7, 31.8, 34.1, 31.6, 29.0, 29.6, 30.4, 27.4, 29.2, 32.5, 30.9, 28.5, 26.4, 28.0,
32.2, 34.1, 37.0, 34.9, 32.3, 33.1, 32.4, 22.8, 25.6, 24.5, 23.4, 22.7, 22.1, 22.9)
soil <- c(rep(1, 14), rep(2, 14))
sehi <- c(rep(1, 7), rep(2, 7), rep(1, 7), rep(2, 7))
newdata <- data.frame(sehi = as.factor(sehi), soil = as.factor(soil), scores = as.vector(height))
summary(aov(scores ~ soil + sehi + soil * sehi, data = newdata))
soil.nat <- c(mean(newdata$scores[1:7]), mean(newdata$scores[8:14]))
soil.art <- c(mean(newdata$scores[15:21]), mean(newdata$scores[22:28]))
plot(soil.nat, xaxt = "n", ylim = c(20,35), type="b", xlab="Sehi", ylab= "meanvalue", pch=1)
par(new=T)
plot(soil.art, xaxt = "n", ylim = c(20,35), type="b", xlab="", ylab="", pch=2)
axis(side=1, at=1:2)
wing <- c(10.4, 10.8, 11.1, 10.2, 10.3, 10.2, 10.7, 10.5, 10.8, 11.2, 10.6, 11.4)
tail <- c(7.4, 7.6, 7.9, 7.2, 7.4, 7.1, 7.4, 7.2, 7.8, 7.7, 7.8, 8.3)
summary(lm(wing ~ tail))
cor.test(wing, tail)
r <- cor(wing, tail)
n <- 12
t <- r*sqrt((n-2)/(1-r^2))
df <- n-2
prob <-2*pt(t,df, lower=F)
c("t" = t, "d.f."=df, "P value" = prob)
age <- c(3.0, 4.0, 5.0, 6.0, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 15.0, 16.0, 17.0)
wing <- c(1.4, 1.5, 2.2, 2.4, 3.1, 3.2, 3.2, 3.9, 4.1, 4.7, 4.5, 5.2, 5.0)
result1 <- lm(wing ~ age)
summary(result1)
mydata <- data.frame(wing = as.vector(wing), age = as.vector(age))
summary(aov(wing ~ age, data = mydata))
X11()
result1.plot <- predict(result1, interval = "confidence")
matplot(age, result1.plot, xlab="age(days)", ylab = "wing length (mm)", type = "1")
age <- c(3.0, 4.0, 5.0, 6.0, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 15.0, 16.0, 17.0)
wing <- c(1.4, 1.5, 2.2, 2.4, 3.1, 3.2, 3.2, 3.9, 4.1, 4.7, 4.5, 5.2, 5.0)
result1 <- lm(wing ~ age)
summary(result1)
mydata <- data.frame(wing = as.vector(wing), age = as.vector(age))
summary(aov(wing ~ age, data = mydata))
X11()
result1_plot <- predict(result1, interval = "confidence")
matplot(age, result1_plot, xlab="age(days)", ylab = "wing length (mm)", type = "1")
age <- c(3.0, 4.0, 5.0, 6.0, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 15.0, 16.0, 17.0)
wing <- c(1.4, 1.5, 2.2, 2.4, 3.1, 3.2, 3.2, 3.9, 4.1, 4.7, 4.5, 5.2, 5.0)
result1 <- lm(wing ~ age)
summary(result1)
mydata <- data.frame(wing = as.vector(wing), age = as.vector(age))
summary(aov(wing ~ age, data = mydata))
# X11()
result1_plot <- predict(result1, interval = "confidence")
matplot(age, result1_plot, xlab="age(days)", ylab = "wing length (mm)", type = "l")
lsd <- c(6,7,4,2,10,1,3,8,6)
question <- c(6,11,6,0,13,2,1,9,9)
cor.test(lsd, question)
result <- lm(question ~ lsd)
result.plot <- predict(result, interval = "confidence")
matplot(lsd, result.plot, xlab="lsd", ylab = "question", type = "l")
lsd <- c(6,7,4,2,10,1,3,8,6)
question <- c(6,11,6,0,13,2,1,9,9)
cor.test(lsd, question)
result <- lm(question ~ lsd)
result.plot <- predict(result, interval = "confidence")
matplot(lsd, result.plot, xlab="lsd", ylab = "question", type = "l")
wing <- c(10.4, 10.8, 11.1, 10.2, 10.3, 10.2, 10.7, 10.5, 10.8, 11.2, 10.6, 11.4)
tail <- c(7.4, 7.6, 7.9, 7.2, 7.4, 7.1, 7.4, 7.2, 7.8, 7.7, 7.8, 8.3)
summary(lm(wing ~ tail))
cor.test(wing, tail)
r <- cor(wing, tail)
n <- 12
t <- r*sqrt((n-2)/(1-r^2))
df <- n-2
prob <-2*pt(t,df, lower=F)
c("t" = t, "d.f."=df, "P value" = prob)
wing <- c(10.4, 10.8, 11.1, 10.2, 10.3, 10.2, 10.7, 10.5, 10.8, 11.2, 10.6, 11.4)
tail <- c(7.4, 7.6, 7.9, 7.2, 7.4, 7.1, 7.4, 7.2, 7.8, 7.7, 7.8, 8.3)
summary(lm(wing ~ tail))
cor.test(wing, tail)
r <- cor(wing, tail)
n <- 12
t <- r*sqrt((n-2)/(1-r^2))
df <- n-2
prob <-2*pt(t,df, lower=F)
c("t" = t, "d.f."=df, "P value" = prob)
age <- c(3.0, 4.0, 5.0, 6.0, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 15.0, 16.0, 17.0)
wing <- c(1.4, 1.5, 2.2, 2.4, 3.1, 3.2, 3.2, 3.9, 4.1, 4.7, 4.5, 5.2, 5.0)
result1 <- lm(wing ~ age)
summary(result1)
mydata <- data.frame(wing = as.vector(wing), age = as.vector(age))
summary(aov(wing ~ age, data = mydata))
# X11()
result1_plot <- predict(result1, interval = "confidence")
matplot(age, result1_plot, xlab="age(days)", ylab = "wing length (mm)", type = "l")
parentes <- c(1,2,4,5,3,2,3,1,5,4,4,2)
chid <- c(3,4,4,5,5,3,4,3,6,6,5,5)
result <- lm(age~parents)
summary(result)
parentes <- c(1,2,4,5,3,2,3,1,5,4,4,2)
children <- c(3,4,4,5,5,3,4,3,6,6,5,5)
result <- lm(children ~ parents)
summary(result)
parentes <- c(1,2,4,5,3,2,3,1,5,4,4,2)
children <- c(3,4,4,5,5,3,4,3,6,6,5,5)
result <- lm(children ~ parents)
parents <- c(1,2,4,5,3,2,3,1,5,4,4,2)
children <- c(3,4,4,5,5,3,4,3,6,6,5,5)
result <- lm(children ~ parents)
summary(result)
parents <- c(1,2,4,5,3,2,3,1,5,4,4,2)
children <- c(3,4,4,5,5,3,4,3,6,6,5,5)
result <- lm(children ~ parents)
summary(result)
result_plot <- predict(result1, interval = "confidence")
matplot(parents, result_plot, xlab="両親の結婚年数", ylab = "被験者の結婚年数", type = "l")
parents <- c(1,2,4,5,3,2,3,1,5,4,4,2)
children <- c(3,4,4,5,5,3,4,3,6,6,5,5)
result <- lm(children ~ parents)
summary(result)
result_plot <- predict(result, interval = "confidence")
matplot(parents, result_plot, xlab="両親の結婚年数", ylab = "被験者の結婚年数", type = "l")
parents <- c(1,2,4,5,3,2,3,1,5,4,4,2)
children <- c(3,4,4,5,5,3,4,3,6,6,5,5)
result <- lm(children ~ parents)
summary(result)
result_plot <- predict(result, interval = "confidence")
matplot(parents, result_plot, xlab="duration of marriage in parents", ylab = "duration of marriage in children", type = "l")
result
result_plot
parents <- c(1,2,4,5,3,2,3,1,5,4,4,2)
children <- c(3,4,4,5,5,3,4,3,6,6,5,5)
result <- lm(children ~ parents)
summary(result)
result_plot
order(result_plot$fit)
order(result_plot,fit)
order(result_plot)
result_plot
result_plot
parents <- c(1,2,4,5,3,2,3,1,5,4,4,2)
children <- c(3,4,4,5,5,3,4,3,6,6,5,5)
result <- lm(children ~ parents)
summary(result)
result
parents <- c(1,2,4,5,3,2,3,1,5,4,4,2)
children <- c(3,4,4,5,5,3,4,3,6,6,5,5)
mydata <- data.frame(parents = as.vector(parents), children = as.vector(children))
mydata
order(mydata$parents)
mydata[order(mydata$parents)]
mydata[order(mydata$parents),]
sorted_data <- mydata[order(mydata$parents),]
sorted_data
sorted_data$parents
parents <- c(1,2,4,5,3,2,3,1,5,4,4,2)
children <- c(3,4,4,5,5,3,4,3,6,6,5,5)
mydata <- data.frame(parents = as.vector(parents), children = as.vector(children))
sorted_data <- mydata[order(mydata$parents),]
result <- lm(sorted_data$children ~ sorted_data$parents)
summary(result)
result_plot <- predict(result, interval = "confidence")
matplot(sorted_data$parents, result_plot, xlab="duration of marriage in parents", ylab = "duration of marriage in children", type = "l")
make_name <- function(dir, i) {
source('~/labolatory/plot/make_table2.r')
make_name <- function(dir, i) {
name1 <- paste(dir,"/func", sep="")
name2 <- paste(name1, i, sep="")
name3 <- paste(name2,".csv", sep="")
return(name3)
}
dir_name <- c("csvs_length_shade_with_archive_D10","csvs_length_shade_wo_archive_D10","csvs_length_de_with_archive_D10","csvs_length_de_wo_archive_D10")
for (i in 1:15) {
name1 <- make_name(dir_name[1], i)
data1 <- read.csv(name1)
name2 <- make_name(dir_name[2], i)
data2 <- read.csv(name2)
generation_number <- 1:5998
average_distance_to_centroid <- data.frame(csvs_length_shade_with_archive_D10=data1[,1], csvs_length_shade_wo_archive_D10=data2[,1])
average_distance_to_centroid_log1 <- c()
for (j in data1[,1]) {
if (j > 0.000000001){
# print(j)
average_distance_to_centroid_log1 <- append(average_distance_to_centroid_log1,log10(as.numeric(j)))
} else {
average_distance_to_centroid_log1 <- append(average_distance_to_centroid_log1, 1 )
}
}
average_distance_to_centroid_log2 <- c()
for (j in data2[,1]) {
if (j > 0.000000001){
average_distance_to_centroid_log2 <- append(average_distance_to_centroid_log2,log10(as.numeric(j)))
} else {
average_distance_to_centroid_log2 <- append(average_distance_to_centroid_log2, 1 )
}
}
average_distance_to_centroid <- data.frame(csvs_length_shade_with_archive_D10=average_distance_to_centroid_log1, csvs_length_shade_wo_archive_D10=average_distance_to_centroid_log2)
# plot(x, data[,1],type='l' )
type <- c("shade_w/a","shade_wo/a")
cols <- c("red", "blue")
#legend("topleft", legend = type, lty = 1, col = cols)
matplot(generation_number, average_distance_to_centroid, type='l', col = cols)
}
for (i in 1:15) {
name1 <- make_name(dir_name[3], i)
data1 <- read.csv(name1)
name2 <- make_name(dir_name[4], i)
data2 <- read.csv(name2)
# d1 <- data1[,1]
# for (j in 1:length(d1)) {d1[j] <- log10(d1[j])}
# d12 <- data2[,1]
# for (j in 1:length(d2)) {d2[j] <- log10(d2[j])}
generation_number <- 1:1998
average_distance_to_centroid <- data.frame(csvs_length_shade_with_archive_D10=data1[,1], csvs_length_shade_wo_archive_D10=data2[,1])
average_distance_to_centroid_log1 <- c()
for (j in data1[,1]) {
# if (j > 0.000000001){
# print(j)
average_distance_to_centroid_log1 <- append(average_distance_to_centroid_log1,log10(as.numeric(j)))
# } else {
#   average_distance_to_centroid_log1 <- append(average_distance_to_centroid_log1, 1 )
# }
}
average_distance_to_centroid_log2 <- c()
for (j in data2[,1]) {
if (j > 0.000000001){
average_distance_to_centroid_log2 <- append(average_distance_to_centroid_log2,log10(as.numeric(j)))
} else {
average_distance_to_centroid_log2 <- append(average_distance_to_centroid_log2, 1 )
}
}
average_distance_to_centroid <- data.frame(csvs_length_shade_with_archive_D10=average_distance_to_centroid_log1, csvs_length_shade_wo_archive_D10=average_distance_to_centroid_log2)
# plot(x, data[,1],type='l' )
type <- c("shade_w/a","shade_wo/a")
cols <- c("red", "blue")
#legend("topleft", legend = type, lty = 1, col = cols)
matplot(generation_number, average_distance_to_centroid, type='l')
}
setwd("~/labolatory/plot")
for (i in 1:15) {
file_name = paste("final/func", i, ".csv" , sep = "")
x <- read.csv(file_name, header = FALSE)
# head(x)i
x[,-1] <- log10(x[,-1])
for (j in 1:ncol(x)) {
x[,j] <- ifelse(is.infinite(x[,j]),NA,x[,j])
}
xaxis <- 1:ncol(x[, -1])          # x 軸座標を設定
cols <- c("red", "blue", "green", "black") # PF を赤色、C を青色、G を緑色
# 準備
plot(0, 0, type = "n", xlim = range(xaxis), ylim = range(x[, -1],na.rm=TRUE),
xlab = "generation number", ylab = "average distance to centroid")
# 平均値と標準偏差を計算して、書き加える
type <- unique(x[, 1])             # 餌の種類を取得
for (k in 1:length(type)) {
m <- apply(x[x[, 1] == type[k], -1], 2, mean)
s <- apply(x[x[, 1] == type[k], -1], 2, sd)
lines(xaxis, m, col = cols[k])
xaxis_n <- c()
m_n <- c()
s_n <- c()
for (j in 1:length(xaxis)) {
if (j %% 50 == 0){
xaxis_n <- append(xaxis_n, xaxis[j])
m_n <- append(m_n, m[j])
s_n <- append(s_n, s[j])
}
}
arrows(xaxis_n, m_n + s_n, xaxis_n, m_n - s_n, angle = 90, length = 0.1, col = cols[k])
arrows(xaxis_n, m_n - s_n, xaxis_n, m_n + s_n, angle = 90, length = 0.1, col = cols[k])
}
# グラフに凡例を書き入れる
# legend("topleft", legend = type, pch = 1, lty = 1, col = cols)
}
for (i in 1:15) {
file_name = paste("final/func", i, ".csv" , sep = "")
x <- read.csv(file_name, header = FALSE)
# head(x)i
x[,-1] <- log10(x[,-1])
for (j in 1:ncol(x)) {
x[,j] <- ifelse(is.infinite(x[,j]),NA,x[,j])
}
xaxis <- 1:ncol(x[, -1])          # x 軸座標を設定
cols <- c("red", "blue", "green", "black") # PF を赤色、C を青色、G を緑色
# 準備
plot(0, 0, type = "n", xlim = range(xaxis), ylim = range(x[, -1],na.rm=TRUE),
xlab = "generation number", ylab = "average distance to centroid")
# 平均値と標準偏差を計算して、書き加える
type <- unique(x[, 1])             # 餌の種類を取得
for (k in 1:length(type)) {
m <- apply(x[x[, 1] == type[k], -1], 2, mean)
s <- apply(x[x[, 1] == type[k], -1], 2, sd)
lines(xaxis, m, col = cols[k])
xaxis_n <- c()
m_n <- c()
s_n <- c()
for (j in 1:length(xaxis)) {
if (j %% 100 == 0){
xaxis_n <- append(xaxis_n, xaxis[j])
m_n <- append(m_n, m[j])
s_n <- append(s_n, s[j])
}
}
arrows(xaxis_n, m_n + s_n, xaxis_n, m_n - s_n, angle = 90, length = 0.05, col = cols[k])
arrows(xaxis_n, m_n - s_n, xaxis_n, m_n + s_n, angle = 90, length = 0.05, col = cols[k])
}
# グラフに凡例を書き入れる
# legend("topleft", legend = type, pch = 1, lty = 1, col = cols)
}
for (i in 1:15) {
file_name = paste("final/func", i, ".csv" , sep = "")
x <- read.csv(file_name, header = FALSE)
# head(x)i
x[,-1] <- log10(x[,-1])
for (j in 1:ncol(x)) {
x[,j] <- ifelse(is.infinite(x[,j]),NA,x[,j])
}
xaxis <- 1:ncol(x[, -1])          # x 軸座標を設定
cols <- c("red", "blue", "green", "black") # PF を赤色、C を青色、G を緑色
# 準備
plot(0, 0, type = "n", xlim = range(xaxis), ylim = range(x[, -1],na.rm=TRUE),
xlab = "generation number", ylab = "average distance to centroid")
# 平均値と標準偏差を計算して、書き加える
type <- unique(x[, 1])             # 餌の種類を取得
for (k in 1:length(type)) {
m <- apply(x[x[, 1] == type[k], -1], 2, mean)
s <- apply(x[x[, 1] == type[k], -1], 2, sd)
lines(xaxis, m, col = cols[k])
xaxis_n <- c()
m_n <- c()
s_n <- c()
for (j in 1:length(xaxis)) {
if (j %% 100 == 0){
xaxis_n <- append(xaxis_n, xaxis[j])
m_n <- append(m_n, m[j])
s_n <- append(s_n, s[j])
}
}
arrows(xaxis_n, m_n + s_n, xaxis_n, m_n - s_n, angle = 90, length = 0.05, col = cols[k])
arrows(xaxis_n, m_n - s_n, xaxis_n, m_n + s_n, angle = 90, length = 0.05, col = cols[k])
}
# グラフに凡例を書き入れる
legend("topleft", legend = type, pch = 1, lty = 1, col = cols)
}
install.packages("exactRankTests", repos="http://cran.ism.ac.jp/")
library(exactRankTests)
library(coin)
x=c(1.83, 1.50, 1.62, 2.48, 1.68, 1.88, 1.55, 3.06, 1.30)
y=c(0.88, 0.65, 0.60, 1.05, 1.06, 1.29, 1.06, 2.14, 1.29)
wilcox.exact(x,y,paired=T)
result = wilcox.exact(x,y,paired=T)
result
wilcox.exact(x,y,paired=T)
result = wilcox.exact(x,y,paired=T)
result.str()
str(result)
result$p.value
sample <- c(rep(0,8), rep(1,35),rep(2,132),rep(3,78),rep(4,32),rep(5,11),rep(6,4),rep(7,0))
r <- hist(sample, breaks=seq(-0.5,7.5,1), main="Historgam of egg distribution", xlab="eggs per bean", col="gray")
x <- c(0:7)
pois <- length(sample) * dpois(x, mean(sample))
lines(r$mids, pois)
result.table <- rbind(r$counts, pois)
rownames(result.table) <- c("observed", "expected")
colnames(result.table) <- r$mids
result.table[,7] <- result.table[,7] + result.table[,8]
table2 <- result.table[,1:7]
shi2value <- sum((table2[1,] - table2[2,])^2/table2[2,1])
# p
chi2value
pchisq(chi2value, DF, lower.tail=F)
pchisq(shi2value, DF, lower.tail=F)
sample <- c(rep(0,8), rep(1,35),rep(2,132),rep(3,78),rep(4,32),rep(5,11),rep(6,4),rep(7,0))
r <- hist(sample, breaks=seq(-0.5,7.5,1), main="Historgam of egg distribution", xlab="eggs per bean", col="gray")
x <- c(0:7)
pois <- length(sample) * dpois(x, mean(sample))
lines(r$mids, pois)
result.table <- rbind(r$counts, pois)
rownames(result.table) <- c("observed", "expected")
colnames(result.table) <- r$mids
result.table[,7] <- result.table[,7] + result.table[,8]
table2 <- result.table[,1:7]
chi2value <- sum((table2[1,] - table2[2,])^2/table2[2,1])
pchisq(chi2value, DF, lower.tail=F)
chi2value
chi.crit
table2
sample <- c(rep(0,8), rep(1,35),rep(2,132),rep(3,78),rep(4,32),rep(5,11),rep(6,4),rep(7,0))
r <- hist(sample, breaks=seq(-0.5,7.5,1), main="Historgam of egg distribution", xlab="eggs per bean", col="gray")
x <- c(0:7)
pois <- length(sample) * dpois(x, mean(sample))
lines(r$mids, pois)
result.table <- rbind(r$counts, pois)
rownames(result.table) <- c("observed", "expected")
colnames(result.table) <- r$mids
result.table[,7] <- result.table[,7] + result.table[,8]
table2 <- result.table[,1:7]
chi2value <- sum((table2[1,] - table2[2,])^2/table2[2,1])
DF <- dim(table2)[2]-2
pchisq(chi2value, DF, lower.tail=F)
chi2value
chi.crit
sample <- c(rep(0,8), rep(1,35),rep(2,132),rep(3,78),rep(4,32),rep(5,11),rep(6,4),rep(7,0))
r <- hist(sample, breaks=seq(-0.5,7.5,1), main="Historgam of egg distribution", xlab="eggs per bean", col="gray")
x <- c(0:7)
pois <- length(sample) * dpois(x, mean(sample))
lines(r$mids, pois)
sample <- c(rep(0,8), rep(1,35),rep(2,132),rep(3,78),rep(4,32),rep(5,11),rep(6,4),rep(7,0))
r <- hist(sample, breaks=seq(-0.5,7.5,1), main="Historgam of egg distribution", xlab="eggs per bean", col="gray")
x <- c(0:7)
pois <- length(sample) * dpois(x, mean(sample))
lines(r$mids, pois)
result.table <- rbind(r$counts, pois)
rownames(result.table) <- c("observed", "expected")
colnames(result.table) <- r$mids
result.table[,7] <- result.table[,7] + result.table[,8]
table2 <- result.table[,1:7]
chi2value <- sum((table2[1,] - table2[2,])^2/table2[2,1])
DF <- dim(table2)[2]-2
pchisq(chi2value, DF, lower.tail=F)
chi2value
chi.crit <- qchisq(0.95,DF)
chi.crit
chi.crit
hist_confidence_limit <- function(M, N, x) {
mean_x <- numeric(2);
sd_x <- numeric(2);
se_x <- numeric(2);
for (i in 1:M) {
mean_x <- mean(x)
sd_x <- sqrt(var(x))
se_x <- sd_x/sqrt(N)
}
xaxis <- seq(1, M, 1)
plot(0, 0, type = "n", xlim = c(1,2), ylim = c(143, 149))
for(i in 1:M){
points(xaxis[i], mean_x)
if (i == 1){
# arrows(xaxis[i], mean_x + se_x, xaxis[i], mean_x - se_x, angle = 90, length = 0.05)
arrows(xaxis[i], mean_x - se_x, xaxis[i], mean_x + se_x, angle = 90, length = 0.05)
}
else if (i == 2){
arrows(xaxis[i], mean_x + se_x*qt(1.0 - 0.025, df = N - 1), xaxis[i], mean_x - se_x*qt(1 - 0.025, df = N - 1), angle = 90, length = 0.05)
arrows(xaxis[i], mean_x - se_x*qt(1.0 - 0.025, df = N - 1), xaxis[i], mean_x + se_x*qt(1 - 0.025, df = N - 1), angle = 90, length = 0.05)
}
}
}
xa <- c(149.5943, 150.8122, 143.4136, 149.1224, 145.6697, 144.6199, 146.8644, 141.0841, 141.1180, 138.7066, 154.3481, 141.6801, 142.4735, 140.2982, 148.3822, 155.4377, 148.3968, 144.8356, 143.0335, 152.0279)
xb <- c(144.1, 146.7, 149.6, 156.8, 149.6, 143.4, 150.4, 151.0, 148.1, 147.6, 147.5, 147.6, 147.4, 149.4, 141.6, 141.6, 145.8, 148.5, 145.3, 147.9)
hist_sampling_distribution <- function(N, sampling_num) {
mydata <- runif(100000, 0, 10)
sample_data <- matrix(0, nrow=N, ncol=sampling_num)
sample_mean <- numeric(sampling_num)
for (i in 1:sampling_num) {
sample_data[1:N, i] <- sample(mydata, N, replace=TRUE)
}
for (i in 1:sampling_num) {
sample_mean[i] <- mean(sample_data[1:N, i])
}
hist(sample_mean, breaks=50, col="grey")
}
hist_sampling_distribution <- function(N, sampling_num) {
mydata <- runif(100000, 0, 10)
sample_data <- matrix(0, nrow=N, ncol=sampling_num)
sample_mean <- numeric(sampling_num)
for (i in 1:sampling_num) {
sample_data[1:N, i] <- sample(mydata, N, replace=TRUE)
}
for (i in 1:sampling_num) {
sample_mean[i] <- mean(sample_data[1:N, i])
}
hist(sample_mean, breaks=50, col="grey")
}
hist_sampling_distribution(20, 10)
hist_sampling_distribution(20, 100)
hist_sampling_distribution(20, 1000)
hist_confidence_limit <- function(M, N, x) {
mean_x <- numeric(2);
sd_x <- numeric(2);
se_x <- numeric(2);
for (i in 1:M) {
mean_x <- mean(x)
sd_x <- sqrt(var(x))
se_x <- sd_x/sqrt(N)
}
xaxis <- seq(1, M, 1)
plot(0, 0, type = "n", xlim = c(1,2), ylim = c(143, 149))
for(i in 1:M){
points(xaxis[i], mean_x)
if (i == 1){
# arrows(xaxis[i], mean_x + se_x, xaxis[i], mean_x - se_x, angle = 90, length = 0.05)
arrows(xaxis[i], mean_x - se_x, xaxis[i], mean_x + se_x, angle = 90, length = 0.05)
}
else if (i == 2){
arrows(xaxis[i], mean_x + se_x*qt(1.0 - 0.025, df = N - 1), xaxis[i], mean_x - se_x*qt(1 - 0.025, df = N - 1), angle = 90, length = 0.05)
arrows(xaxis[i], mean_x - se_x*qt(1.0 - 0.025, df = N - 1), xaxis[i], mean_x + se_x*qt(1 - 0.025, df = N - 1), angle = 90, length = 0.05)
}
}
}
xa <- c(149.5943, 150.8122, 143.4136, 149.1224, 145.6697, 144.6199, 146.8644, 141.0841, 141.1180, 138.7066, 154.3481, 141.6801, 142.4735, 140.2982, 148.3822, 155.4377, 148.3968, 144.8356, 143.0335, 152.0279)
xb <- c(144.1, 146.7, 149.6, 156.8, 149.6, 143.4, 150.4, 151.0, 148.1, 147.6, 147.5, 147.6, 147.4, 149.4, 141.6, 141.6, 145.8, 148.5, 145.3, 147.9)
